version: '3.8'
services:
  postgres:
    image: postgres:13
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - app-network

  backend:
    build: ./backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - PROJECT_NAME=${PROJECT_NAME}
      - STACK_NAME=${STACK_NAME}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
    depends_on:
      - postgres
    networks:
      - app-network

  frontend:
    build: ./frontend
    restart: unless-stopped
    env_file:
      - ./frontend/.env
    environment:
      - VITE_API_URL=${VITE_API_URL}
    networks:
      - app-network
    depends_on:
      - backend

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '8090:81'
    volumes:
      - npm-data:/data
      - letsencrypt-data:/etc/letsencrypt
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  npm-data:
  letsencrypt-data: